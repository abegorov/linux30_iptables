table ip filter {
  set clients_ipv4 {
    type ipv4_addr
    flags timeout
  }
  set candidates_ipv4 {
    type ipv4_addr . inet_service
    flags timeout
  }
  chain input {
    type filter hook input priority 0; policy drop
    ct state invalid counter drop
    ct state {established, related} counter accept
    iifname lo counter accept
    meta l4proto tcp tcp flags & syn == syn ct state new goto input_tcp
    meta l4proto udp goto input_udp
    counter drop
  }
  chain input_udp {
    udp dport 22222 add @candidates_ipv4 {ip  saddr . 2222 timeout 1s}
    udp dport 2222 ip saddr . udp dport @candidates_ipv4 \
      add @candidates_ipv4 {ip saddr . 222 timeout 1s}
    udp dport 222 ip saddr . udp dport @candidates_ipv4 \
      add @candidates_ipv4 {ip saddr . 22 timeout 1s}
    udp dport 22 ip saddr . udp dport @candidates_ipv4 \
      add @clients_ipv4 {ip saddr timeout 60s} \
      log prefix "Successful portknock: "
    counter drop
  }
  chain input_tcp {
    iifname "eth0" tcp dport ssh counter accept
    tcp dport ssh ip saddr @clients_ipv4 counter accept
    counter drop
  }
}
table ip nat {
  chain prerouting {
    type nat hook prerouting priority dstnat; policy accept;
  }
  chain postrouting {
    type nat hook postrouting priority srcnat; policy accept;
    oifname "eth0" masquerade
  }
}
